
/**
 * client.ts
 * 
 * Configura e exporta o cliente Supabase para uso em toda a aplicação.
 * Inclui configurações de autenticação e auxiliares de depuração.
 */

// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Chaves de API do Supabase
const SUPABASE_URL = "https://yzrovzblelpnftlegczx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inl6cm92emJsZWxwbmZ0bGVnY3p4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ3NTc1MzksImV4cCI6MjA2MDMzMzUzOX0.wEvwIk_suF0uLWkGfMBa2XHmjvN4CySk58aoz24uun8";

/**
 * Cliente Supabase tipado para uso em toda a aplicação.
 * Importe da seguinte forma:
 * import { supabase } from "@/integrations/supabase/client";
 */
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,      // Persiste a sessão entre reloads
    autoRefreshToken: true,    // Atualiza o token automaticamente
    detectSessionInUrl: true,  // Detecta o token na URL
    flowType: 'pkce',          // Usa PKCE para autenticação
    storage: localStorage      // Armazena sessão no localStorage
  },
  global: {
    headers: {
      'Content-Type': 'application/json'
    }
  }
});

/**
 * Adiciona token da sessão aos headers globais quando disponível
 * Isso permite que as Edge Functions recebam o token automaticamente
 */
supabase.auth.onAuthStateChange((event, session) => {
  if (session?.access_token) {
    console.log("Auth state change:", event);
    supabase.functions.setAuth(session.access_token);
  }
});

/**
 * Helpers de depuração para autenticação (apenas em ambiente de desenvolvimento)
 */
if (typeof window !== 'undefined') {
  // Expõe a sessão atual
  (window as any).getSupabaseSession = async () => {
    const { data, error } = await supabase.auth.getSession();
    console.log("Current session:", data.session, error);
    return { data, error };
  };

  // Funções auxiliares para testes
  (window as any).createTestUser = async () => {
    const testEmail = `test${Math.floor(Math.random() * 10000)}@example.com`;
    const testPassword = "Password123!";
    
    const { data, error } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
    });
    
    console.log("Test user created:", { email: testEmail, password: testPassword }, data, error);
    return { email: testEmail, password: testPassword, data, error };
  };

  // Método de login direto para testes
  (window as any).loginWithPassword = async (email: string, password: string) => {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    
    console.log("Login result:", data, error);
    return { data, error };
  };
}
